name: Changelog
on:
  pull_request:
    types: [opened, synchronize]
    branches: [master]
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "template.yaml"
      - "requirements.txt"
      - "Makefile"
      - "*.md"

jobs:
  get-label:
    runs-on: ubuntu-latest
    name: get label
    outputs:
      labels: "${{ steps.pr-labels.outputs.labels }}"
    steps:
      - name: Get PR labels
        id: pr-labels
        uses: joerick/pr-labels-action@v1.0.8
  check-docs:
    runs-on: ubuntu-latest
    name: Check Documentation formatting and links
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Validate Links
      run: |
        echo "Validating links in .md files"
        md_files=$(find . -name "*.md")
        
        # Loop through each Markdown file
        for file in $md_files; do
          # Extract and validate links
          line_number=0
          while IFS= read -r line; do
            ((line_number++))
            link=$(echo "$line" | grep -oP 'https:\/\/[^\s)\]]*')
            if [ -n "$link" ]; then
              # Validate the link using curl
              http_code=$(curl -s -o /dev/null -I -w "%{http_code}" "$link" || echo "error")
              if [ "$http_code" != "200" ] ; then
                echo "HTTP Status Code at line $line_number: $http_code"
                echo "Invalid link in file: $file"
                echo "  $line"
              fi
            fi
          done < "$file"
          done || true  # Continue even if there is an error
          echo ">> All links are valid"
      shell: bash
    # - name: Import environment variables from file
    #   run: cat ".github/env" >> $GITHUB_ENV
    # - uses: actions/setup-go@v4
    #   with:
    #     go-version: '${{ env.golang-version }}'
    # - uses: actions/cache@v3
    #   with:
    #     path: .mdoxcache
    #     key: mdoxcache
    # - name: ls
    #   run: ls -a
    # - run: make check-docs

    
  check-changelog-updates:
    if: "${{ needs.get-label.outputs.labels != ' skip-changelog ' }}"
    runs-on: ubuntu-latest
    needs: get-label
    name: Check changelog update
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v37

    - name: Checking Files
      if: ${{ steps.changed-files.outputs.all_changed_files != '' }}
      run: |
        chmod +x ./scripts/changelog_check.sh
        ./scripts/changelog_check.sh
